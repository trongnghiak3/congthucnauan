<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content="Kh√°m ph√° danh s√°ch c√¥ng th·ª©c n·∫•u ƒÉn ngon t·∫°i KemRecipe - t·ª´ m√≥n ch√≠nh, m√≥n ph·ª• ƒë·∫øn tr√°ng mi·ªáng." />
  <meta name="keywords" content="c√¥ng th·ª©c n·∫•u ƒÉn, KemRecipe, m√≥n ch√≠nh, m√≥n ph·ª•, tr√°ng mi·ªáng" />
  <meta name="author" content="KemRecipe Team" />
  <title>Danh S√°ch C√¥ng Th·ª©c - KemRecipe</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    .recipe-card img {
      transition: transform 0.3s ease;
    }
    .recipe-card:hover img {
      transform: scale(1.05);
    }
    .placeholder {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
    }
    @keyframes loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
    /* Sidebar responsive */
    #sidebar {
      transition: transform 0.3s ease;
    }
    @media (max-width: 768px) {
      #sidebar {
        transform: translateX(-100%);
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        z-index: 50;
      }
      #sidebar.open {
        transform: translateX(0);
      }
      #mainContent {
        width: 100% !important;
      }
    }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <div class="min-h-screen px-4 py-8">
    <main class="max-w-7xl mx-auto">
      <!-- Breadcrumb -->
      <nav class="mb-4 text-sm text-gray-600">
        <a href="/" class="hover:underline">Trang ch·ªß</a> > 
        <span>Danh S√°ch C√¥ng Th·ª©c</span>
      </nav>

      <!-- N√∫t m·ªü sidebar tr√™n mobile -->
      <button id="toggleSidebar" class="md:hidden fixed top-4 left-4 z-50 p-2 bg-yellow-500 text-white rounded-full">
        <i class="fas fa-filter"></i>
      </button>

      <div class="flex flex-col md:flex-row gap-6">
        <!-- Sidebar (30%) -->
        <aside id="sidebar" class="w-full md:w-[20%] bg-white p-6 rounded-xl shadow-lg">
          <h3 class="text-xl font-semibold text-gray-800 mb-4">B·ªô l·ªçc n√¢ng cao</h3>
          
          <!-- S·ªë ph·∫ßn ƒÉn -->
          <div class="mb-6">
            <label class="block text-gray-700 font-medium mb-2">S·ªë ph·∫ßn ƒÉn</label>
            <div class="flex flex-wrap gap-2">
              <button class="portion-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-portion="1-2">1-2 ng∆∞·ªùi</button>
              <button class="portion-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-portion="3-4">3-4 ng∆∞·ªùi</button>
              <button class="portion-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-portion="5+">5+ ng∆∞·ªùi</button>
              <button class="portion-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-portion="">T·∫•t c·∫£</button>
            </div>
          </div>

          <!-- Th·ªùi gian n·∫•u -->
          <div class="mb-6">
            <label class="block text-gray-700 font-medium mb-2">Th·ªùi gian n·∫•u</label>
            <div class="flex flex-wrap gap-2">
              <button class="time-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-time="0-30">D∆∞·ªõi 30 ph√∫t</button>
              <button class="time-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-time="30-60">30-60 ph√∫t</button>
              <button class="time-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-time="60+">Tr√™n 60 ph√∫t</button>
              <button class="time-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-time="">T·∫•t c·∫£</button>
            </div>
          </div>

          <!-- ƒê·ªô kh√≥ -->
          <div class="mb-6">
            <label class="block text-gray-700 font-medium mb-2">ƒê·ªô kh√≥</label>
            <div class="flex flex-wrap gap-2">
              <button class="difficulty-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-difficulty="easy">D·ªÖ</button>
              <button class="difficulty-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-difficulty="medium">Trung b√¨nh</button>
              <button class="difficulty-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-difficulty="hard">Kh√≥</button>
              <button class="difficulty-btn px-4 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-difficulty="">T·∫•t c·∫£</button>
            </div>
          </div>

          <!-- N√∫t reset b·ªô l·ªçc -->
          <button id="resetFilters" class="w-full px-4 py-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition">X√≥a b·ªô l·ªçc</button>
        </aside>

        <!-- N·ªôi dung ch√≠nh (70%) -->
       <section id="mainContent" class="w-full md:w-[80%] bg-white p-6 md:p-8 rounded-xl shadow-lg">
          <!-- <h2 class="text-3xl md:text-4xl font-bold text-yellow-600 text-center mb-6 md:mb-8">üçΩÔ∏è Danh S√°ch C√¥ng Th·ª©c</h2> -->

          <!-- T√¨m ki·∫øm v√† S·∫Øp x·∫øp -->
          <div class="flex flex-col md:flex-row justify-center items-center gap-4 mb-6">
            <div class="relative w-full md:w-2/3">
              <input type="text" id="searchInput"
                     placeholder=" Nh·∫≠p t√™n c√¥ng th·ª©c..."
                     class="w-full p-4 pl-12 border border-gray-300 rounded-full shadow-sm focus:outline-none focus:ring-2 focus:ring-yellow-500 text-lg" />
              <i class="fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
            </div>
            <select id="sortSelect" class="p-2 border border-gray-300 rounded-full shadow-sm focus:outline-none">
              <option value="default">S·∫Øp x·∫øp: M·∫∑c ƒë·ªãnh</option>
              <option value="time-asc">Th·ªùi gian n·∫•u: TƒÉng d·∫ßn</option>
              <option value="time-desc">Th·ªùi gian n·∫•u: Gi·∫£m d·∫ßn</option>
              <option value="rating-desc">ƒê√°nh gi√°: Cao nh·∫•t</option>
            </select>
          </div>

          <!-- B·ªô l·ªçc danh m·ª•c -->
          <div class="flex flex-wrap justify-center gap-3 mb-8">
            <button class="filter-btn px-5 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-category="">T·∫•t c·∫£</button>
            <button class="filter-btn px-5 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-category="mon-chinh">M√≥n Ch√≠nh</button>
            <button class="filter-btn px-5 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-category="mon-phu">M√≥n Ph·ª•</button>
            <button class="filter-btn px-5 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-yellow-500 hover:text-white transition" data-category="trang-mieng">Tr√°ng Mi·ªáng</button>
          </div>

          <!-- Danh s√°ch c√¥ng th·ª©c -->
         <div id="recipeList" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <% recipes.forEach(function(recipe) { %>
              <div class="recipe-card bg-white shadow-lg rounded-xl overflow-hidden transition-all duration-300 hover:shadow-xl cursor-pointer"
                   data-category-id="<%= recipe.category %>"
                   data-portion="<%= recipe.so_phan_an || '1-2' %>"
                   data-time="<%= recipe.thoi_gian_nau %>"
                   data-difficulty="<%= recipe.do_kho || 'easy' %>">
                <a href="/cong-thuc/<%= recipe.id_chinh %>">
                  <div class="relative w-full h-48">
                    <% if (recipe.hinh_anh) { %>
                      <img src="<%= recipe.hinh_anh %>" alt="·∫¢nh <%= recipe.ten_ct %>"
                           class="w-full h-full object-cover rounded-t-xl"
                           onerror="this.onerror=null; this.classList.add('hidden'); this.nextElementSibling.classList.remove('hidden');"
                           onload="this.classList.remove('hidden'); this.previousElementSibling.classList.add('hidden');">
                      <div class="absolute inset-0 placeholder rounded-t-xl hidden"></div>
                    <% } else { %>
                      <div class="w-full h-full bg-gray-200 flex items-center justify-center rounded-t-xl">
                        <span class="text-gray-500">Kh√¥ng c√≥ ·∫£nh</span>
                      </div>
                    <% } %>
                  </div>
                  <div class="p-4">
                    <h3 class="font-semibold text-gray-900 text-lg truncate mb-2"><%= recipe.ten_ct %></h3>
                    <div class="flex justify-between items-center text-gray-600 text-sm">
                      <div class="flex items-center space-x-1">
                        <i class="fas fa-clock text-yellow-500"></i>
                        <span><%= recipe.thoi_gian_nau %> ph√∫t</span>
                      </div>
                      <div class="flex items-center space-x-1 text-yellow-400">
                        <% for(let i=0; i<5; i++) { %>
                          <% if(i < recipe.rating) { %>
                            <i class="fas fa-star"></i>
                          <% } else { %>
                            <i class="far fa-star"></i>
                          <% } %>
                        <% } %>
                        <span class="ml-1 text-gray-500 text-xs">(<%= recipe.rating %>/5)</span>
                      </div>
                    </div>
                  </div>
                </a>
              </div>
            <% }); %>
          </div>
          <p id="noResults" class="text-center text-gray-500 mt-6 hidden">Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c n√†o ph√π h·ª£p. H√£y th·ª≠ t·ª´ kh√≥a kh√°c!</p>

          <!-- Ph√¢n trang -->
          <div class="flex justify-center mt-6">
            <button id="showMoreBtn" class="px-6 py-2 bg-yellow-500 text-white rounded-full hover:bg-yellow-600 transition hidden">
              Xem th√™m
            </button>
          </div>
        </section>
      </div>
    </main>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const searchInput = document.getElementById("searchInput");
      const filterButtons = document.querySelectorAll(".filter-btn");
      const portionButtons = document.querySelectorAll(".portion-btn");
      const timeButtons = document.querySelectorAll(".time-btn");
      const difficultyButtons = document.querySelectorAll(".difficulty-btn");
      const sortSelect = document.getElementById("sortSelect");
      const recipeList = document.getElementById("recipeList");
      const noResults = document.getElementById("noResults");
      const showMoreBtn = document.getElementById("showMoreBtn");
      const resetFiltersBtn = document.getElementById("resetFilters");
      const toggleSidebarBtn = document.getElementById("toggleSidebar");
      const sidebar = document.getElementById("sidebar");

      let recipeCards = Array.from(document.querySelectorAll(".recipe-card"));
      let recipesPerPage = 8;
      let selectedCategory = "";
      let selectedPortion = "";
      let selectedTime = "";
      let selectedDifficulty = "";
      let searchTerm = "";
      let sortOption = "default";
      let visibleCount = recipesPerPage;

      // Debounce function ƒë·ªÉ gi·∫£m t·∫ßn su·∫•t x·ª≠ l√Ω t√¨m ki·∫øm
      function debounce(func, delay) {
        let timeout;
        return function (...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), delay);
        };
      }

      // S·∫Øp x·∫øp c√¥ng th·ª©c
      function sortRecipes(recipes) {
        return recipes.sort((a, b) => {
          const timeA = parseInt(a.querySelector("span").textContent) || 0;
          const timeB = parseInt(b.querySelector("span").textContent) || 0;
          const ratingA = parseFloat(a.querySelector(".text-xs").textContent.match(/\d+\.?\d*/)[0]) || 0;
          const ratingB = parseFloat(b.querySelector(".text-xs").textContent.match(/\d+\.?\d*/)[0]) || 0;

          if (sortOption === "time-asc") return timeA - timeB;
          if (sortOption === "time-desc") return timeB - timeA;
          if (sortOption === "rating-desc") return ratingB - ratingA;
          return 0;
        });
      }

      // L·ªçc c√¥ng th·ª©c
      function getFilteredRecipes() {
        let filtered = recipeCards.filter(recipe => {
          const title = recipe.querySelector("h3").textContent.toLowerCase();
          const category = recipe.getAttribute("data-category-id") || "";
          const portion = recipe.getAttribute("data-portion") || "";
          const time = parseInt(recipe.getAttribute("data-time")) || 0;
          const difficulty = recipe.getAttribute("data-difficulty") || "";

          // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm v√† danh m·ª•c
          const matchesSearch = title.includes(searchTerm);
          const matchesCategory = selectedCategory === "" || category === selectedCategory;

          // L·ªçc theo s·ªë ph·∫ßn ƒÉn
          let matchesPortion = true;
          if (selectedPortion) {
            if (selectedPortion === "1-2") matchesPortion = portion === "1-2";
            else if (selectedPortion === "3-4") matchesPortion = portion === "3-4";
            else if (selectedPortion === "5+") matchesPortion = portion === "5+";
          }

          // L·ªçc theo th·ªùi gian n·∫•u
          let matchesTime = true;
          if (selectedTime) {
            if (selectedTime === "0-30") matchesTime = time <= 30;
            else if (selectedTime === "30-60") matchesTime = time > 30 && time <= 60;
            else if (selectedTime === "60+") matchesTime = time > 60;
          }

          // L·ªçc theo ƒë·ªô kh√≥
          const matchesDifficulty = selectedDifficulty === "" || difficulty === selectedDifficulty;

          return matchesSearch && matchesCategory && matchesPortion && matchesTime && matchesDifficulty;
        });
        return sortRecipes(filtered);
      }

      // Render c√¥ng th·ª©c
      function renderRecipes() {
        const filteredRecipes = getFilteredRecipes();
        recipeCards.forEach(r => r.classList.add("hidden"));

        const toShow = filteredRecipes.slice(0, visibleCount);
        toShow.forEach(recipe => recipe.classList.remove("hidden"));

        noResults.classList.toggle("hidden", filteredRecipes.length > 0);
        showMoreBtn.classList.toggle("hidden", visibleCount >= filteredRecipes.length);
      }

      function resetAndRender() {
        visibleCount = recipesPerPage;
        renderRecipes();
      }

      // S·ª± ki·ªán cho n√∫t "Xem th√™m"
      showMoreBtn.addEventListener("click", () => {
        visibleCount += recipesPerPage;
        renderRecipes();
      });

      // T√¨m ki·∫øm v·ªõi debounce
      searchInput.addEventListener("input", debounce(function () {
        searchTerm = this.value.toLowerCase();
        resetAndRender();
      }, 300));

      // L·ªçc theo danh m·ª•c
      filterButtons.forEach(button => {
        button.addEventListener("click", function () {
          filterButtons.forEach(btn => btn.classList.remove("bg-yellow-500", "text-white"));
          this.classList.add("bg-yellow-500", "text-white");
          selectedCategory = this.getAttribute("data-category");
          resetAndRender();
        });
      });

      // L·ªçc theo s·ªë ph·∫ßn ƒÉn
      portionButtons.forEach(button => {
        button.addEventListener("click", function () {
          portionButtons.forEach(btn => btn.classList.remove("bg-yellow-500", "text-white"));
          this.classList.add("bg-yellow-500", "text-white");
          selectedPortion = this.getAttribute("data-portion");
          resetAndRender();
        });
      });

      // L·ªçc theo th·ªùi gian n·∫•u
      timeButtons.forEach(button => {
        button.addEventListener("click", function () {
          timeButtons.forEach(btn => btn.classList.remove("bg-yellow-500", "text-white"));
          this.classList.add("bg-yellow-500", "text-white");
          selectedTime = this.getAttribute("data-time");
          resetAndRender();
        });
      });

      // L·ªçc theo ƒë·ªô kh√≥
      difficultyButtons.forEach(button => {
        button.addEventListener("click", function () {
          difficultyButtons.forEach(btn => btn.classList.remove("bg-yellow-500", "text-white"));
          this.classList.add("bg-yellow-500", "text-white");
          selectedDifficulty = this.getAttribute("data-difficulty");
          resetAndRender();
        });
      });

      // S·∫Øp x·∫øp
      sortSelect.addEventListener("change", function () {
        sortOption = this.value;
        resetAndRender();
      });

      // Reset b·ªô l·ªçc
      resetFiltersBtn.addEventListener("click", () => {
        selectedPortion = "";
        selectedTime = "";
        selectedDifficulty = "";
        selectedCategory = "";
        searchTerm = "";
        sortOption = "default";
        searchInput.value = "";
        filterButtons.forEach(btn => btn.classList.remove("bg-yellow-500", "text-white"));
        portionButtons.forEach(btn => btn.classList.remove("bg-yellow-500", "text-white"));
        timeButtons.forEach(btn => btn.classList.remove("bg-yellow-500", "text-white"));
        difficultyButtons.forEach(btn => btn.classList.remove("bg-yellow-500", "text-white"));
        sortSelect.value = "default";
        resetAndRender();
      });

      // Toggle sidebar tr√™n mobile
      toggleSidebarBtn.addEventListener("click", () => {
        sidebar.classList.toggle("open");
      });

      resetAndRender();
    });
  </script>
</body>
</html>